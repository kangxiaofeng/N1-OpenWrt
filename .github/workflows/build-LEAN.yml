name: Build OpenWRT-LEAN for N1 (Optimized)
 
on:
  workflow_dispatch:
 
env:
  REPO_URL: https://github.com/coolsnowwolf/lede  
  REPO_BRANCH: master 
  CONFIG_FILE: N1-LEDE/.config 
  DIY_SH: N1-LEDE/diy.sh  
  FILES: N1-LEDE/files 
  TZ: Asia/Shanghai 
  CCACHE_DIR: /tmp/ccache  # 新增缓存目录变量 
 
jobs:
  build:
    runs-on: ubuntu-22.04 
    strategy:
      fail-fast: false  # 允许单个步骤失败不影响整体流程 
 
    steps:
    # 阶段1：系统信息检查与空间优化 
    - name: System diagnostics 
      run: |
        echo "=== Hardware Summary ===" 
        lscpu | grep -E 'Model name|Socket|Core'
        free -h 
        df -hT 
        
    - name: Space optimization 
      uses: easimon/maximize-build-space@master 
      with:
        root-reserve-mb: 8192 
        swap-size-mb: 4096 
        remove-dotnet: true 
        remove-android: true 
 
    # 阶段2：依赖安装与环境配置 
    - name: Setup build environment 
      env:
        DEBIAN_FRANCH: bookworm 
        DEBIAN_FRONTEND: noninteractive 
      run: |
        sudo apt-get -yqq update 
        sudo apt-get -yqq install \
          build-essential clang flex g++ gawk gcc-multilib gettext git \
          libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget qemu-utils rename time gn libfuse-dev ccache 
        sudo timedatectl set-timezone "$TZ"
        echo "/tmp/ccache" | sudo tee -a /etc/fstab 
 
    # 阶段3：代码管理与缓存配置 
    - name: Repository management 
      working-directory: ${{ github.workspace  }}
      run: |
        if [ ! -d "openwrt/.git" ]; then 
          git clone --depth=1 --filter=blob:none $REPO_URL -b $REPO_BRANCH openwrt 
        else 
          cd openwrt 
          git reset --hard HEAD 
          git clean -fdx 
          git pull 
        fi 
 
    - name: Cache configuration 
      uses: actions/cache@v3 
      with:
        path: |
          ${{ env.CCACHE_DIR }}
          openwrt/dl 
          openwrt/staging_dir 
        key: ${{ runner.os  }}-n1-${{ hashFiles(env.CONFIG_FILE) }}-${{ hashFiles(env.DIY_SH) }}
 
    # 阶段4：构建流程优化 
    - name: Feeds management 
      working-directory: ./openwrt 
      run: |
        ./scripts/feeds clean 
        ./scripts/feeds update -a -f 
        ./scripts/feeds install -a -f 
 
    - name: Configuration setup 
      working-directory: ./openwrt 
      run: |
        [ -f "../$FILES" ] && cp -rf ../$FILES .
        [ -f "../$CONFIG_FILE" ] && cp ../$CONFIG_FILE .config 
        chmod +x "../$DIY_SH" && "../$DIY_SH"
        make defconfig 
 
    # 阶段5：智能构建系统 
    - name: Smart compilation 
      working-directory: ./openwrt 
      env:
        CCACHE_DIR: ${{ env.CCACHE_DIR }}
        CCACHE_MAXSIZE: 2G 
      run: |
        make download -j$(($(nproc)*2)) || make download -j1 
        find dl -size -1024c -delete 
        
        # 智能编译策略 
        if [ -d "$CCACHE_DIR" ]; then 
          ccache -o compression=true 
          ccache -M $CCACHE_MAXSIZE 
          ccache -s 
        fi 
        
        (time make -j$(nproc) V=s) || \
        (make -j1 V=s || { echo "Final compilation failed"; exit 1; })
 
    # 阶段6：产出物处理 
    - name: Artifact packaging 
      if: success()
      uses: unifreq/openwrt_packit@master 
      env:
        PACKAGE_SOC: s905d 
        KERNEL_VERSION: 5.15.148 
        AUTO_LATEST: false 
 
    - name: Release management 
      if: success()
      uses: softprops/action-gh-release@v1 
      with:
        tag_name: N1-$(date +%Y%m%d)
        files: |
          openwrt/bin/targets/**/*.img.gz  
          openwrt/bin/targets/**/*.manifest 
        body: |
          ### 固件信息 
          - 默认IP: 192.168.2.2 
          - 用户名: root 
          - 密码: password 
          - 编译时间: $(date -u "+%Y-%m-%dT%H:%M:%SZ")
 
    # 阶段7：清理与维护 
    - name: Post-cleanup 
      if: always()
      run: |
        sudo rm -rf /tmp/* 
        sudo apt-get clean 
        docker system prune -af 
